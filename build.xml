<?xml version="1.0" encoding="UTF-8"?>
<!-- ======================================================================                   
     Administrator                                                                
     ====================================================================== -->
<project name="Developer 2000 Reports" basedir=".">

    <!-- set global properties for this build -->
    <property name="dir.src.main" location="src/main/java" />
    <property name="dir.src.dest" location="src/destinations/java" />
    <property name="dir.src.payload" location="src/payload/java" />
    <property name="dir.test" location="src/test/java" />
    <property name="dir.res" location="src/main/resources" />
    <property name="dir.build" location="tmp" />
    <property name="dir.project.res" location="res" />


    <property name="oracle.home" location="O:/DevSuite10gR2" />
    <property name="oracle.home.jlib" location="${oracle.home}/jlib" />
    <property name="oracle.home.lib" location="${oracle.home}/lib" />

    <property name="dir.reports" location="${oracle.home}/reports" />
    <property name="dir.reports.jlib" location="${dir.reports}/jlib" />

    <property name="deploy.jar.ZIPdestination" value="zipdestination_0.0.1.jar" />
    <property name="deploy.jar.MQdestination" value="mqdestination_0.0.1.jar" />
    <property name="deploy.jar.MgpCommons" value="mgpcommons_0.0.1.jar" />

    <property name="lib.mgp.reports.commons" location="${dir.reports.jlib}/${deploy.jar.MgpCommons}" />

    <property name="lib.rwrun" location="${dir.reports.jlib}/rwrun.jar" />
    <property name="lib.zrclient" location="${oracle.home.jlib}/zrclient.jar" />
    <property name="lib.log4j" location="${dir.reports.jlib}/log4j-1.2.4.jar" />
    <property name="lib.commons-codec" location="${dir.reports.jlib}/commons-codec-1.5.jar" />
    
    <macrodef name="echotimestamp">
      <sequential>
        <local name="timestamp" />
        <tstamp>
          <format property="timestamp" pattern="yyyy-MM-dd HH:mm:ss" />
        </tstamp>
        <echo message="${timestamp}" />
      </sequential>
    </macrodef>

    <scriptdef name="propertyreplace" language="javascript">
        <attribute name="name" />
        <attribute name="value" />
        <attribute name="token" />
        <attribute name="replace" />
        <![CDATA[
		    propertyName=attributes.get("name");
		    currentValue=project.getProperty(propertyName);
	        value=attributes.get("value");
	        if ( value == null ) {
		        value=currentValue;
		    }
		    newValue=value;
		
		    token=attributes.get("token");
		    replace=attributes.get("replace");
		    if ( token != null ) {
		        newValue = value.replace( token, replace );
		    }
	        project.setProperty(attributes.get("name"), newValue );
		]]>
    </scriptdef>

    <path id="project.class.path">
        <pathelement path="${lib.rwrun}" />
        <pathelement path="${lib.zrclient}/" />
        <pathelement path="${lib.log4j}" />
        <pathelement path="${lib.commons-codec}" />
    </path>

    <property name="orajaxb" location="${oracle.home}\bin\orajaxb.bat" />
    <property name="lib.ora.xmlparser2" location="${oracle.home.lib}/xmlparserv2.jar" />
    <property name="lib.ora.xsu12" location="${oracle.home.lib}/xsu12.jar" />
    <property name="lib.ora.xml" location="${oracle.home.lib}/xml.jar" />

    <path id="orajaxb.class.path">
        <pathelement path="${lib.ora.xml}" />
    </path>


    <property name="jwsdp.home" location="O:/Oracle/jwsdp-1.1" />
    <property name="jwsdp.jaxb.home" location="${jwsdp.home}/jaxb-1.0" />
    <property name="jwsdp.jaxb.lib" location="${jwsdp.jaxb.home}/lib" />
    <property name="xjc" location="${jwsdp.jaxb.home}/bin/xjc.bat" />
    <property name="lib.sun.jaxb-api" location="${jwsdp.jaxb.lib}/jaxb-api.jar" />
    <property name="lib.sun.jaxb-xjc" location="${jwsdp.jaxb.lib}/jaxb-xjc.jar" />
    <property name="lib.sun.jaxb-libs" location="${jwsdp.jaxb.lib}/jaxb-libs.jar" />
    <property name="lib.sun.jaxb-ri" location="${jwsdp.jaxb.lib}/jaxb-ri.jar" />

    <path id="sunjaxb.class.path">
        <pathelement path="${lib.sun.jaxb-ri}" />
        <pathelement path="${lib.sun.jaxb-libs}" />
    </path>



    <path id="ZIPdest.class.path">
        <path refid="project.class.path" />
        <pathelement path="${lib.mgp.reports.commons}" />
    </path>

    <path id="MQdest.class.path">
        <path refid="project.class.path" />
        <pathelement path="${lib.mgp.reports.commons}" />
    </path>

    <!--        <path refid="orajaxb.class.path" /> -->
    <!--        <path refid="sunjaxb.class.path" /> -->

    <property name="ora.jdk.14.lib" location="${oracle.home}\jre\1.4.2.\lib" />
    <path id="java14.bootstrap.class.path">
        <fileset dir="${ora.jdk.14.lib}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <target name="splashit">
        <splash imageurl="file:///${dir.project.res}/animated.gif" showduration="1" />
    </target>

    <target name="Clean JAXB generated classes">
        <echo level="info" message="About to delete previously generated classes ..." />
        <delete failonerror="false" verbose="true">
            <fileset dir="${jaxb.cdmdoc.dir.schema}">
                <include name="**/*.java" />
                <include name="**/jaxb.properties" />
            </fileset>
        </delete>
    </target>

    <property name="jaxb.cdmdoc.packagename" value="de.mgpit.oracle.reports.plugin.destination.cdm.schema" />
    <propertyreplace name="jaxb.cdmdoc.dir.schema" value="${dir.src.payload}${file.separator}${jaxb.cdmdoc.packagename}" token="." replace="${file.separator}" />

    <property name="schema.name" value="cdmdoc" />
    <property name="schema.schema.name" location="${jaxb.cdmdoc.dir.schema}/${schema.name}.xsd" />
    <property name="schema.bindings.name" location="${jaxb.cdmdoc.dir.schema}/${schema.name}.xjb" />
    <target name="ORA JAXB on cdmdoc" depends="splashit, Clean JAXB generated classes" description="Create JAXB classes for cdmdoc.xsd">
        <echo level="info" message="CDMDOC Schema Dir.....: ${jaxb.cdmdoc.dir.schema}" />
        <echo level="info" message="CDMDOC Package Name...: ${jaxb.cdmdoc.packagename}" />
        <exec executable="cmd.exe" dir="${dir.src.payload}" vmlauncher="false">
            <env key="CLASSPATH" value="${dir.src.payload};${lib.ora.xmlparser2};${lib.ora.xsu12};${lib.ora.xml}" />
            <arg value="/c" />
            <arg value="${orajaxb} -extension -bindingFile ${schema.bindings.name} -targetPkg ${jaxb.cdmdoc.packagename} -schema ${schema.schema.name}" />
        </exec>
    </target>

    <target name="SUN JAXB on cdmdoc" depends="splashit, Clean JAXB generated classes" description="Create JAXB classes for cdmdoc.xsd">
        <echo level="info" message="CDMDOC Schema Dir.....: ${jaxb.cdmdoc.dir.schema}" />
        <echo level="info" message="CDMDOC Package Name...: ${jaxb.cdmdoc.packagename}" />
        <exec executable="cmd.exe" dir="${dir.src.payload}" vmlauncher="false">
            <env key="CLASSPATH" value="${dir.src.payload};${lib.sun.jaxb-api};${lib.sun.jaxb-xjc}" />
            <arg value="/c" />
            <arg value="${xjc} -extension -b ${schema.bindings.name} -p ${jaxb.cdmdoc.packagename} ${schema.schema.name} " />
        </exec>
    </target>

    <target name="cleanbuildcommons" depends="splashit">
        <delete dir="${dir.build}" includeemptydirs="true" verbose="true" failonerror="false" />
        <mkdir dir="${dir.build}" />
    </target>

    <target name="cleanbuild" depends="splashit">
        <delete dir="${dir.build}" includeemptydirs="true" verbose="true" failonerror="false" />
        <mkdir dir="${dir.build}" />
    </target>

    <target name="compileCommons" depends="cleanbuildcommons">
        <javac includeantruntime="false" defaultexcludes="true" srcdir="${dir.src.main}" destdir="${dir.build}" source="1.4" target="1.4" debug="yes" >
            <compilerarg value="-Xbootclasspath/p:${toString:java14.bootstrap.class.path}" />
            <classpath refid="project.class.path" />
        </javac>

        <javac includeantruntime="false" defaultexcludes="true" srcdir="${dir.src.payload}" destdir="${dir.build}" source="1.4" target="1.4" debug="yes" >
            <exclude name="**/cdm/**"/>
            <compilerarg value="-Xbootclasspath/p:${toString:java14.bootstrap.class.path}" />
            <classpath refid="project.class.path" />
        </javac>

    </target>

    <target name="package&amp;DeployCommons">
        <jar destfile="${deploy.jar.MgpCommons}" basedir="${dir.build}" update="false" />
        <copy verbose="true" file="${deploy.jar.MgpCommons}" todir="${dir.reports.jlib}" />
        <delete file="${deploy.jar.MgpCommons}" failonerror="false" />
    </target>

    <target name="9 Deploy Commons" description="Deploy Commons" depends="compileCommons, package&amp;DeployCommons" />

    <target name="compileZIPdest" depends="cleanbuild">
        <echo message="About to compile ZIP Destination ..." />
        <echo level="info" message="Using classpath ${toString:ZIPdest.class.path}" />
        <javac includeantruntime="false" defaultexcludes="true" srcdir="${dir.src.dest}" destdir="${dir.build}" source="1.4" target="1.4" debug="yes" >
            <compilerarg value="-Xbootclasspath/p:${toString:java14.bootstrap.class.path}" />
            <classpath refid="ZIPdest.class.path" />
            <include name="**/zip/**" />
            <exclude name="**/cdm/**" />
            <exclude name="**/mq/**" />
        </javac>
    </target>

    <target name="packageZIPdest" depends="compileZIPdest">
        <echo message="About to make JAR archive ..." />
        <copy file="${dir.res}/log4j.ZipDestination.properties" todir="${dir.build}" overwrite="true" />
        <jar destfile="${deploy.jar.ZIPdestination}" basedir="${dir.build}" update="false" />
    </target>

    <target name="compileMQdest" depends="cleanbuild">
        <echo message="About to compile MQ Destination ..." />
        <echo level="info" message="Using classpath ${toString:MQdest.class.path}" />
        <javac includeantruntime="false" defaultexcludes="true" srcdir="${dir.src.dest}" destdir="${dir.build}" source="1.4" target="1.4" debug="yes" >
            <compilerarg value="-Xbootclasspath/p:${toString:java14.bootstrap.class.path}" />
            <classpath refid="MQdest.class.path" />
            <include name="**/mq/**" />
            <exclude name="**/cdm/**" />
            <exclude name="**/zip/**" />
        </javac>
    </target>

    <target name="copycdmresources">
        <propertyreplace name="dir.build.schema" value="${dir.build}${file.separator}${jaxb.cdmdoc.packagename}" token="." replace="${file.separator}" />
        <copy verbose="true" file="${jaxb.cdmdoc.dir.schema}/cdmdoc.xsd" todir="${dir.build.schema}" />
        <copy verbose="true" file="${jaxb.cdmdoc.dir.schema}/jaxb.properties" todir="${dir.build.schema}" />
    </target>
    <target name="packageMQdest" depends="compileMQdest">
        <echo message="About to make JAR archive ..." />
        <copy file="${dir.res}/log4j.MQDestination.properties" todir="${dir.build}" overwrite="true" />
        <jar destfile="${deploy.jar.MQdestination}" basedir="${dir.build}" update="false" />
    </target>

    <target name="2 Deploy Zip Destination" depends="packageZIPdest" description="Deploy ZIP Destination">
        <copy verbose="true" file="${deploy.jar.ZIPdestination}" todir="${dir.reports.jlib}" />
        <delete file="${deploy.jar.ZIPdestination}" failonerror="false" />
        <echo message="Zip Destination: Deployment finished" />
        <echotimestamp/>
    </target>

    <target name="3 Deploy MQ Destination" depends="packageMQdest" description="Deploy MQ Destination">
        <copy verbose="true" file="${deploy.jar.MQdestination}" todir="${dir.reports.jlib}" />
        <delete file="${deploy.jar.MQdestination}" failonerror="false" />
        <echo message="MQ Destination: Deployment finished" />
        <echotimestamp/>
    </target>
    
    <target name="1 Deploy Destinations" description="Create and Deploy Destinations" depends="9 Deploy Commons,2 Deploy Zip Destination,3 Deploy MQ Destination">
        <echo message="Deployment finished" />
        <echotimestamp/>
    </target>


    <fileset dir="${dir.src.main}" id="sourcefiles#common">
        <include name="**/*.java" />
    </fileset>
    <fileset dir="${dir.src.dest}" id="sourcefiles#destinations">
        <include name="**/*.java" />
    </fileset>
    <fileset dir="${dir.src.payload}" id="sourcefiles#payload">
        <include name="**/*.java" />
    </fileset>
    <fileset dir="${dir.test}" id="testfiles">
        <include name="**/*.java" />
        <exclude name="**/com/**" />
        <exclude name="**/spielwiese/**" />
    </fileset>

    <union id="src.all">
        <resources refid="sourcefiles#common" />
        <resources refid="sourcefiles#destinations" />
        <resources refid="sourcefiles#payload" />
        <resources refid="testfiles" />
    </union>

    <target name="Make HTML Documentation" description="Prepare for documentation">
        <delete dir="res/html" failonerror="false" />
        <echo message="${toString:src.all}" />
        <copy overwrite="true" todir="res/html">

            <resources refid="src.all" />

            <mapper>
                <chainedmapper>
                    <flattenmapper />
                    <globmapper from="*.java" to="*.html" />
                </chainedmapper>
            </mapper>
            <filterchain>
                <tokenfilter>
                    <!-- remember: filetokenizer liest die ganze Datei -->
                    <filetokenizer />
                    <scriptfilter language="javascript">
                        <![CDATA[
                        var theToken=self.getToken();
                        /* Watch out! & must be replaced FIRST !!! 
                           Order matters ... */
                        theToken = theToken.replace('&', '&amp;' );
                        theToken = theToken.replace('<', '&lt;' );
                        theToken = theToken.replace('>', '&gt;' );
                        self.setToken(theToken);
                        ]]>
                    </scriptfilter>
                </tokenfilter>
                <concatfilter prepend="res/doc-header.html.fragment" />
                <concatfilter append="res/doc-trailer.html.fragment" />
                <tokenfilter>
                    <filetokenizer />
                    <scriptfilter language="javascript">
                        <![CDATA[
                        var theToken=self.getToken();
                        var startOf = theToken.indexOf( '<pre><code class="language-java">' );
                        if ( startOf > -1 ) {
                            /* lame search for class name - no syntax awareness ... */
                            startOf = startOf + '<pre><code class="language-java">'.length + 1;
                            var last = startOf;
                            /* Skip imports ... */
                            startOf = theToken.indexOf( 'import', last );
                            while( startOf > -1 ) {
                                last = startOf + 'import'.length+1;
                                startOf = theToken.indexOf( 'import', last );
                            }
                            starOf = last;
                            startOf = theToken.indexOf( 'public', startOf );
                            startOf = startOf + 'public'.length+1;
                            startOf = theToken.indexOf( 'class', startOf );
                            if ( startOf > -1 ) {
                                startOf = startOf + 'class'.length + 1;
                                var endOf = theToken.indexOf( " ", startOf );
                                if ( endOf > startOf ) {
                                    var replacement = theToken.substring( startOf, endOf );
                                    replacement = replacement.trim();
                                    theToken = theToken.replace( '$$REPLACE$$', replacement );
                                }
                            }
                        }
                        self.setToken( theToken );
                        ]]>
                    </scriptfilter>
                </tokenfilter>
            </filterchain>
        </copy>
    </target>
    
    <!--
    <scriptdef name="scripttest2" language="javascript">
      <element name="fileset" type="fileset"/>
   
      <![CDATA[
        filesets = elements.get("fileset");
        project.log("Number of filesets = " + filesets.size());
        for (i = 0; i < filesets.size(); ++i) {
          project.log("fileset " + i + " basedir = "
            + filesets.get(i).getDir(project));
        }
      ]]>
   
    </scriptdef>
   
    <target name="ZZZ Test" description="ZZZ Test">
        <scripttest2>
            <fileset dir="${dir.src.main}"/>
            <fileset dir="${dir.src.dest}"/>
            </scripttest2>
    </target>
    -->
</project>